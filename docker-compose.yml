
version: '3.8'

services:
  api:
    image: deepdefend:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - ENABLE_ASYNC_PROCESSING=true
      - DATABASE_URL=${DATABASE_URL:-sqlite:///deepdefend.db}
      - REQUIRE_AUTH=${REQUIRE_AUTH:-true}
      - JWT_SECRET=${JWT_SECRET:-change_me_in_production}
      - ENABLE_RATE_LIMITING=${ENABLE_RATE_LIMITING:-true}
      - STRUCTURED_LOGGING=${STRUCTURED_LOGGING:-true}
      - ENABLE_PROMETHEUS_METRICS=${ENABLE_PROMETHEUS_METRICS:-true}
      - ENABLE_EXPLANATIONS=${ENABLE_EXPLANATIONS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    volumes:
      - uploads:/app/uploads
      - models:/app/models
      - logs:/app/logs
    depends_on:
      - redis
      - db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  worker:
    image: deepdefend:latest
    command: ["celery", "-A", "task_queue.celery_app", "worker", "--loglevel=info"]
    environment:
      - ENVIRONMENT=production
      - DEBUG=false
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=${DATABASE_URL:-sqlite:///deepdefend.db}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - STRUCTURED_LOGGING=${STRUCTURED_LOGGING:-true}
    volumes:
      - uploads:/app/uploads
      - models:/app/models
      - logs:/app/logs
    depends_on:
      - redis
      - db
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-deepdefend}
      - POSTGRES_USER=${POSTGRES_USER:-deepdefend}
      - POSTGRES_DB=${POSTGRES_DB:-deepdefend}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U deepdefend"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/.htpasswd:/etc/nginx/.htpasswd
    depends_on:
      - api
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

volumes:
  uploads:
  models:
  logs:
  redis_data:
  postgres_data:
  prometheus_data:
